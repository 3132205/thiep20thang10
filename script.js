// H√†m ph√°t nh·∫°c v√† chuy·ªÉn trang, ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng click n√∫t "B·∫Øt ƒë·∫ßu"
function startAndNavigate() {
  const music = document.getElementById('background-music');
  if (music) {
    // 1. C·ªë g·∫Øng ph√°t nh·∫°c (t∆∞∆°ng t√°c ƒë√£ x·∫£y ra n√™n tr√¨nh duy·ªát cho ph√©p)
    music.play().catch(error => {
      console.log('Ph√°t nh·∫°c b·ªã l·ªói, c√≥ th·ªÉ b·ªã ch·∫∑n. ƒê·∫£m b·∫£o file nhac_nen.mp3 t·ªìn t·∫°i:', error);
    });

    // 2. L∆∞u tr·∫°ng th√°i nh·∫°c ƒë√£ ƒë∆∞·ª£c ph√°t ƒë·ªÉ trang thi·ªáp ti·∫øp t·ª•c
    sessionStorage.setItem('musicPlayed', 'true');
  }
  
  // 3. Chuy·ªÉn trang
  window.location.href = 'thiep.html';
}

document.addEventListener('DOMContentLoaded', () => {
  
  const music = document.getElementById('background-music');

  // --- LOGIC PH√ÅT NH·∫†C KHI TRUY C·∫¨P TRANG THI·ªÜP ---
  if (music && sessionStorage.getItem('musicPlayed') === 'true' && document.body.classList.contains('main-card-page')) {
    music.play().catch(error => {
      console.log('Kh√¥ng th·ªÉ ti·∫øp t·ª•c ph√°t nh·∫°c ·ªü trang thi·ªáp:', error);
    });
  }

  // --- HI·ªÜU ·ª®NG CH·ªÆ CH·∫†Y (TYPEWRITER) ---
  function typeWriter(elementId, text, speed, callback) {
    const element = document.getElementById(elementId);
    if (!element) {
      if (callback) callback();
      return;
    }
    
    element.innerHTML = ''; 
    let i = 0;
    
    function type() {
      if (i < text.length) {
        element.innerHTML += text.charAt(i);
        i++;
        setTimeout(type, speed);
      } else {
        element.classList.remove('cursor-blink');
        if (callback) {
          setTimeout(callback, 500); 
        }
      }
    }
    
    element.classList.add('cursor-blink');
    type();
  }
  
  // --- LOGIC TRANG CH·ª¶ (INDEX.HTML) - Ch·∫°y ch·ªØ ti√™u ƒë·ªÅ trang ch·ªß ---
  const mainTitleElement = document.getElementById('main-title-text');
  if (mainTitleElement) {
    const originalText = mainTitleElement.getAttribute('data-text');
    typeWriter('main-title-text', originalText, 50); 
  }
  
  // --- LOGIC TRANG THI·ªÜP (THIEP.HTML) - CHU·ªñI G√ï CH·ªÆ ---
  function startPopupTypingSequence() {
    const greetingEl = document.getElementById('popup-greeting-text');
    const messageEl = document.getElementById('popup-message-text');
    const vow1El = document.getElementById('vow-list-item-1');
    const vow2El = document.getElementById('vow-list-item-2');
    const vow3El = document.getElementById('vow-list-item-3');
    const signatureEl = document.getElementById('popup-signature-text');

    // H√ÄM: Hi·ªán ·∫£nh b√≥ hoa
    const showFlowerImage = () => {
        const flowerImg = document.getElementById('hoa-chuc-mung');
        if (flowerImg) {
            flowerImg.classList.add('show');
        }
    };

    const step6_signature = () => {
        // G·ªçi showFlowerImage sau khi ch·ªØ k√Ω g√µ xong
        if (signatureEl) typeWriter(signatureEl.id, signatureEl.getAttribute('data-text'), 80, showFlowerImage); 
    };
    const step5_vow3 = () => {
        if (vow3El) typeWriter(vow3El.id, vow3El.getAttribute('data-text'), 60, step6_signature);
    };
    const step4_vow2 = () => {
        if (vow2El) typeWriter(vow2El.id, vow2El.getAttribute('data-text'), 60, step5_vow3);
    };
    const step3_vow1 = () => {
        if (vow1El) typeWriter(vow1El.id, vow1El.getAttribute('data-text'), 60, step4_vow2);
    };
    const step2_message = () => {
        if (messageEl) typeWriter(messageEl.id, messageEl.getAttribute('data-text'), 30, step3_vow1); 
    };
    const step1_greeting = () => {
        if (greetingEl) typeWriter(greetingEl.id, greetingEl.getAttribute('data-text'), 80, step2_message);
    };
    
    step1_greeting();
  }

  // --- HI·ªÜU ·ª®NG EMOJI R∆†I N·ªÄN ---
  const effectContainer = document.getElementById('effect-container');
  const emojis = ['üíå', 'üåπ', 'üå∏', 'üíñ', 'üéÅ'];
  function createEffectItem() {
    if (!effectContainer) return;
    const item = document.createElement('span');
    item.classList.add('effect-item');
    item.textContent = emojis[Math.floor(Math.random() * emojis.length)];
    const size = Math.random() * 20 + 25;
    item.style.fontSize = `${size}px`;
    item.style.left = `${Math.random() * window.innerWidth}px`;
    item.style.setProperty('--end-x', `${Math.random() * 400 - 200}px`);
    item.style.animationDuration = `${Math.random() * 5 + 3}s`; 
    effectContainer.appendChild(item);
    item.addEventListener('animationend', () => item.remove());
  }
  if (effectContainer) setInterval(createEffectItem, 700);

  // --- H·ªòP QU√Ä B·∫¨T N·∫ÆP & G·ªåI HI·ªÜU ·ª®NG ---
  const giftImg = document.getElementById('gift-img');
  const popupCard = document.getElementById('popup-card');
  const closeBtn = document.getElementById('close-popup-btn');

  if (giftImg) {
    giftImg.addEventListener('click', () => {
      
      // M·ªü h·ªôp qu√† v√† ch·∫°y hi·ªáu ·ª©ng
      giftImg.classList.add('gift-open');
      showPopupEmojis();
      setTimeout(() => popupCard.classList.add('show'), 1000);
      setTimeout(() => giftImg.classList.remove('gift-open'), 1200);
      
      // G·ªåI CHU·ªñI CH·∫†Y CH·ªÆ
      setTimeout(startPopupTypingSequence, 1700);
    });
  }

  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      popupCard.classList.remove('show');
    });
  }

  // --- EMOJI B·∫¨T L√äN KHI M·ªû QU√Ä ---
  function showPopupEmojis() {
    const emojis = ['üíñ', 'üå∏', 'üéÅ', '‚ú®', 'üíê'];
    for (let i = 0; i < 8; i++) {
      const e = document.createElement('span');
      e.textContent = emojis[Math.floor(Math.random() * emojis.length)];
      e.classList.add('pop-emoji');
      e.style.left = `${Math.random() * 150 + 50}px`;
      e.style.bottom = '80px';
      e.style.animationDelay = `${i * 0.1}s`;
      const giftContainer = document.querySelector('.gift-container');
      if (giftContainer) {
          giftContainer.appendChild(e);
          setTimeout(() => e.remove(), 1500);
      }
    }
  }
});